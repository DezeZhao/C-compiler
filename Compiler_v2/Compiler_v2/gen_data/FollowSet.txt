ActualParaList:[)]
AddExpression:[!= ) , ; < <= == > >=]
AddExpressionLoop:[( const_char const_float const_int id]
AssignSentence:[id if return while }]
CallFunction:[!= ) * + , - / ; < <= == > >=]
ConstValue:[!= ) * + , - / ; < <= == > >=]
ElseSentenceBlock:[id if return while }]
Expression:[) , ;]
ExpressionLoop:[( const_char const_float const_int id]
FTYPE:[!= ) * + , - / ; < <= == > >=]
Factor:[!= ) * + , - / ; < <= == > >=]
FactorLoop:[( const_char const_float const_int id]
FormalPara:[)]
FormalParaList:[)]
FunctionStmt:[# char float int void]
IfSentence:[id if return while }]
If_M1:[{]
If_M2:[{]
If_N:[else]
InternalStmt:[id if return while]
InternalVariableStmt:[;]
Item:[!= ) + , - ; < <= == > >=]
ItemLoop:[( const_char const_float const_int id]
Para:[) ,]
ParaLoop:[char float int]
Program:[#]
Relop:[( const_char const_float const_int id]
ReturnExpression:[;]
ReturnSentence:[id if return while }]
Sentence:[id if return while }]
SentenceBlock:[# char else float id if int return void while }]
SentenceLoop:[id if return while]
SentenceString:[}]
Start:[#]
Stmt:[# char float int void]
StmtLoop:[char float int void]
StmtString:[#]
StmtType:[# char float int void]
VariableStmt:[# char float int void]
VariableType:[id]
WhileSentence:[id if return while }]
While_M1:[(]
While_M2:[{]
