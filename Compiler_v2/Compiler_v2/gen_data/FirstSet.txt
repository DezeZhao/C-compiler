ActualParaList:[$ ( const_char const_float const_int id]
AddExpression:[( const_char const_float const_int id]
AddExpressionLoop:[$ ( const_char const_float const_int id]
AssignSentence:[id]
CallFunction:[(]
ConstValue:[const_char const_float const_int]
ElseSentenceBlock:[$ else]
Expression:[( const_char const_float const_int id]
ExpressionLoop:[$ ( const_char const_float const_int id]
FTYPE:[$ (]
Factor:[( const_char const_float const_int id]
FactorLoop:[$ ( const_char const_float const_int id]
FormalPara:[$ char float int void]
FormalParaList:[char float int]
FunctionStmt:[(]
IfSentence:[if]
If_M1:[$]
If_M2:[$]
If_N:[$]
InternalStmt:[$ char float int]
InternalVariableStmt:[char float int]
Item:[( const_char const_float const_int id]
ItemLoop:[$ ( const_char const_float const_int id]
Para:[char float int]
ParaLoop:[$ char float int]
Program:[char float int void]
Relop:[!= < <= == > >=]
ReturnExpression:[$ ( const_char const_float const_int id]
ReturnSentence:[return]
Sentence:[id if return while]
SentenceBlock:[{]
SentenceLoop:[$ id if return while]
SentenceString:[id if return while]
Start:[char float int void]
Stmt:[char float int void]
StmtLoop:[$ char float int void]
StmtString:[char float int void]
StmtType:[( ;]
VariableStmt:[;]
VariableType:[char float int]
WhileSentence:[while]
While_M1:[$]
While_M2:[$]
